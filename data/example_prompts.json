[
  {
    "Task": "Code Summarization (Java)",
    "Zero-Shot": "Summarize the functionality of the following method:\npublic Map<String, Integer> countWordFrequency(List<String> words) {\n  Map<String, Integer> freqMap = new HashMap<>();\n  for (String word : words) {\n    freqMap.put(word, freqMap.getOrDefault(word, 0) + 1);\n  }\n  return freqMap;\n}",
    "Few-Shot": "Summarize the functionality of the following method:\npublic Map<String, Integer> countWordFrequency(List<String> words) {\n  Map<String, Integer> freqMap = new HashMap<>();\n  for (String word : words) {\n    freqMap.put(word, freqMap.getOrDefault(word, 0) + 1);\n  }\n  return freqMap;\n}\n\nExample 1:\nThis method counts the frequency of each word in a list and returns a map where keys are words and values are their occurrence counts.\n\nExample 2:\nThis method creates a frequency map of words. It iterates through a list of strings, incrementing the count for each word in a HashMap, and returns the resulting frequency map."
  },
  {
    "Task": "Bug Fixing (Python Off-by-One)",
    "Zero-Shot": "Identify and fix the off-by-one error in this function:\ndef sum_range(start, end):\n  total = 0\n  for i in range(start, end):\n    total += i\n  return total",
    "Few-Shot": "Identify and fix the off-by-one error in this function:\ndef sum_range(start, end):\n  total = 0\n  for i in range(start, end):\n    total += i\n  return total\n\nExample 1:\nThe function has an off-by-one error because range(start, end) excludes the 'end' value. To include it, change to range(start, end+1):\n\ndef sum_range(start, end):\n  total = 0\n  for i in range(start, end+1):\n    total += i\n  return total\n\nExample 2:\nThe issue is that range(start, end) doesn't include 'end' itself. Fix by using range(start, end+1) to include all numbers from start to end inclusive:\n\ndef sum_range(start, end):\n  total = 0\n  for i in range(start, end+1):\n    total += i\n  return total"
  },
  {
    "Task": "Bug Classification (C++)",
    "Zero-Shot": "Classify the type of bug in the following C++ function:\nint * getArray(int size) {\n  int arr[size]; // Warning: local array\n  return arr; // Bug: returning pointer to local variable\n}",
    "Few-Shot": "Classify the type of bug in the following C++ function:\nint * getArray(int size) {\n  int arr[size]; // Warning: local array\n  return arr; // Bug: returning pointer to local variable\n}\n\nExample 1:\nThis function contains a dangling pointer bug. It returns a pointer to a local array variable that will be deallocated when the function returns, leading to undefined behavior when the returned pointer is used.\n\nExample 2:\nThe bug is a stack memory return bug. The function creates a local array on the stack and returns its address. When the function exits, the stack memory is reclaimed, making the returned pointer invalid and causing a dangling pointer issue."
  },
  {
    "Task": "Generating Email Validators (Python + Regex)",
    "Zero-Shot": "Complete the function using regex to validate basic email addresses:\ndef is_valid_email(email):\n  # TODO: Complete using regex\n  pass",
    "Few-Shot": "Complete the function using regex to validate basic email addresses:\ndef is_valid_email(email):\n  # TODO: Complete using regex\n  pass\n\nExample 1:\ndef is_valid_email(email):\n  import re\n  pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n  return bool(re.match(pattern, email))\n\nExample 2:\ndef is_valid_email(email):\n  import re\n  email_pattern = r'^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$'\n  if re.match(email_pattern, email):\n    return True\n  return False"
  },
  {
    "Task": "Generating Flask APIs (Python)",
    "Zero-Shot": "Create a '/greet/<username>' endpoint that returns a JSON greeting:\nfrom flask import Flask, jsonify\napp = Flask(__name__)\n@app.route('/greet/<username>')\ndef greet(username):\n  # TODO: Return a JSON greeting\n  pass",
    "Few-Shot": "Create a '/greet/<username>' endpoint that returns a JSON greeting:\nfrom flask import Flask, jsonify\napp = Flask(__name__)\n@app.route('/greet/<username>')\ndef greet(username):\n  # TODO: Return a JSON greeting\n  pass\n\nExample 1:\n@app.route('/greet/<username>')\ndef greet(username):\n  return jsonify({\"message\": f\"Hello, {username}!\"})\n\nExample 2:\n@app.route('/greet/<username>')\ndef greet(username):\n  response = {\n    \"greeting\": f\"Welcome, {username}!\",\n    \"timestamp\": datetime.now().isoformat()\n  }\n  return jsonify(response)"
  },
  {
    "Task": "SQL Schema Design (SQL)",
    "Zero-Shot": "Write the schema for a review app with users, books, and reviews:\n-- TODO: Design schema with appropriate keys and constraints\n-- Tables: users(id, name), books(id, title), reviews(id, user_id, book_id, rating)",
    "Few-Shot": "Write the schema for a review app with users, books, and reviews:\n-- TODO: Design schema with appropriate keys and constraints\n-- Tables: users(id, name), books(id, title), reviews(id, user_id, book_id, rating)\n\nExample 1:\nCREATE TABLE users (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE books (\n  id INTEGER PRIMARY KEY,\n  title VARCHAR(200) NOT NULL\n);\n\nCREATE TABLE reviews (\n  id INTEGER PRIMARY KEY,\n  user_id INTEGER NOT NULL,\n  book_id INTEGER NOT NULL,\n  rating INTEGER CHECK(rating BETWEEN 1 AND 5),\n  FOREIGN KEY (user_id) REFERENCES users(id),\n  FOREIGN KEY (book_id) REFERENCES books(id)\n);\n\nExample 2:\nCREATE TABLE users (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name VARCHAR(100) NOT NULL,\n  email VARCHAR(100) UNIQUE\n);\n\nCREATE TABLE books (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  title VARCHAR(200) NOT NULL,\n  author VARCHAR(100),\n  published_year INTEGER\n);\n\nCREATE TABLE reviews (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  user_id INTEGER NOT NULL,\n  book_id INTEGER NOT NULL,\n  rating INTEGER NOT NULL CHECK(rating BETWEEN 1 AND 5),\n  review_text TEXT,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n  FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE\n);"
  },
  {
    "Task": "Null Dereference Detection (Java)",
    "Zero-Shot": "Identify any null dereference risk:\npublic int getLength(String s) {\n  return s.length(); // What if s is null?\n}",
    "Few-Shot": "Identify any null dereference risk:\npublic int getLength(String s) {\n  return s.length(); // What if s is null?\n}\n\nExample 1:\nThere is a null dereference risk in this function. If the parameter 's' is null, calling s.length() will throw a NullPointerException. The function should check if 's' is null before attempting to access its length.\n\nExample 2:\nThis method has a null dereference vulnerability. When 's' is null, calling length() on it will cause a NullPointerException. To fix this, add a null check before accessing the length property, or use Objects.requireNonNull() to validate the input."
  },
  {
    "Task": "CSV Parser Variants (Python)",
    "Zero-Shot": "Improve the parser to support quoted fields:\ndef parse_csv_line(line):\n  return line.split(',') # Incomplete: doesn't handle quoted fields",
    "Few-Shot": "Improve the parser to support quoted fields:\ndef parse_csv_line(line):\n  return line.split(',') # Incomplete: doesn't handle quoted fields\n\nExample 1:\ndef parse_csv_line(line):\n  import csv\n  return next(csv.reader([line]))\n\nExample 2:\ndef parse_csv_line(line):\n  import re\n  pattern = r',(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)'\n  fields = re.split(pattern, line)\n  return [field.strip('\"') for field in fields]"
  },
  {
    "Task": "Data Class to API Conversion (Kotlin)",
    "Zero-Shot": "Convert the data class to a REST API using Ktor:\ndata class Product(val id: Int, val name: String, val price: Double)\n// TODO: Create GET and POST endpoints using Ktor",
    "Few-Shot": "Convert the data class to a REST API using Ktor:\ndata class Product(val id: Int, val name: String, val price: Double)\n// TODO: Create GET and POST endpoints using Ktor\n\nExample 1:\nimport io.ktor.application.*\nimport io.ktor.http.*\nimport io.ktor.request.*\nimport io.ktor.response.*\nimport io.ktor.routing.*\n\nval products = mutableListOf<Product>()\n\nfun Application.module() {\n  routing {\n    get(\"/products\") {\n      call.respond(products)\n    }\n    get(\"/products/{id}\") {\n      val id = call.parameters[\"id\"]?.toIntOrNull()\n      val product = id?.let { products.find { p -> p.id == it } }\n      if (product != null) call.respond(product) else call.respondText(\"Not Found\", status = HttpStatusCode.NotFound)\n    }\n    post(\"/products\") {\n      val product = call.receive<Product>()\n      products.add(product)\n      call.respondText(\"Product added\", status = HttpStatusCode.Created)\n    }\n  }\n}\n\nExample 2:\nimport io.ktor.application.*\nimport io.ktor.features.*\nimport io.ktor.http.*\nimport io.ktor.jackson.*\nimport io.ktor.request.*\nimport io.ktor.response.*\nimport io.ktor.routing.*\n\nclass ProductService {\n  private val products = mutableMapOf<Int, Product>()\n  \n  fun getAll(): List<Product> = products.values.toList()\n  fun getById(id: Int): Product? = products[id]\n  fun add(product: Product): Product {\n    products[product.id] = product\n    return product\n  }\n}\n\nfun Application.configureRouting() {\n  val service = ProductService()\n  install(ContentNegotiation) {\n    jackson {}\n  }\n  routing {\n    route(\"/api/products\") {\n      get {\n        call.respond(service.getAll())\n      }\n      get(\"/{id}\") {\n        val id = call.parameters[\"id\"]?.toIntOrNull() ?: return@get call.respond(HttpStatusCode.BadRequest)\n        val product = service.getById(id) ?: return@get call.respond(HttpStatusCode.NotFound)\n        call.respond(product)\n      }\n      post {\n        val product = call.receive<Product>()\n        service.add(product)\n        call.respond(HttpStatusCode.Created, product)\n      }\n    }\n  }\n}"
  },
  {
    "Task": "Function Summarization (Python)",
    "Zero-Shot": "Write a brief summary of the function:\ndef reverse_words(sentence):\n  return ' '.join(sentence.split()[::-1])",
    "Few-Shot": "Write a brief summary of the function:\ndef reverse_words(sentence):\n  return ' '.join(sentence.split()[::-1])\n\nExample 1:\nThis function reverses the order of words in a sentence while maintaining the original word order.\n\nExample 2:\nThis function takes a sentence, splits it into words, reverses their order, and joins them back together with spaces, effectively reversing the sequence of words in the input sentence."
  },
  {
    "Task": "Prompt from Code Comments (Python)",
    "Zero-Shot": "Write a prompt that could generate the code:\n# This function checks if a number is prime\ndef is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5)+1):\n    if n % i == 0:\n      return False\n  return True",
    "Few-Shot": "Write a prompt that could generate the code:\n# This function checks if a number is prime\ndef is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5)+1):\n    if n % i == 0:\n      return False\n  return True\n\nExample 1:\nWrite a Python function named is_prime that determines if a given number is prime. The function should return False for numbers less than or equal to 1, and check divisibility from 2 up to the square root of the input number for efficiency.\n\nExample 2:\nImplement a function called is_prime in Python that checks whether a number is prime. A prime number is only divisible by 1 and itself. For efficiency, the function should only check divisors up to the square root of the input number, and should handle edge cases like numbers less than 2."
  },
  {
    "Task": "Fixing Factorial Bug (Python)",
    "Zero-Shot": "Fix the bug when input is 0:\ndef factorial(n):\n  result = 1\n  for i in range(1, n):\n    result *= i\n  return result",
    "Few-Shot": "Fix the bug when input is 0:\ndef factorial(n):\n  result = 1\n  for i in range(1, n):\n    result *= i\n  return result\n\nExample 1:\nThe bug is that when n=0, the function returns 1 without multiplying anything, which is correct for factorial(0)=1, but the loop range is wrong. The function should use range(1, n+1) to include n itself:\n\ndef factorial(n):\n  result = 1\n  for i in range(1, n+1):\n    result *= i\n  return result\n\nExample 2:\nThere are two issues: 1) The range should be (1, n+1) to include n itself, and 2) The function correctly returns 1 for n=0 by default, which matches the mathematical definition of 0! = 1. Here's the fixed version:\n\ndef factorial(n):\n  result = 1\n  for i in range(1, n+1):\n    result *= i\n  return result"
  },
  {
    "Task": "Linked List Node Deletion (C)",
    "Zero-Shot": "Implement node deletion by value:\nstruct Node {\n  int data;\n  struct Node* next;\n};\nvoid deleteNode(struct Node** head, int key) {\n  // TODO: Implement node deletion\n}",
    "Few-Shot": "Implement node deletion by value:\nstruct Node {\n  int data;\n  struct Node* next;\n};\nvoid deleteNode(struct Node** head, int key) {\n  // TODO: Implement node deletion\n}\n\nExample 1:\nvoid deleteNode(struct Node** head, int key) {\n  struct Node *temp = *head, *prev = NULL;\n  \n  // If head node itself holds the key\n  if (temp != NULL && temp->data == key) {\n    *head = temp->next;\n    free(temp);\n    return;\n  }\n  \n  // Search for the key, keep track of previous node\n  while (temp != NULL && temp->data != key) {\n    prev = temp;\n    temp = temp->next;\n  }\n  \n  // If key was not present\n  if (temp == NULL) return;\n  \n  // Unlink the node from linked list\n  prev->next = temp->next;\n  free(temp);\n}\n\nExample 2:\nvoid deleteNode(struct Node** head, int key) {\n  // Handle empty list\n  if (*head == NULL) return;\n  \n  struct Node* current = *head;\n  \n  // Special case: delete head node\n  if (current->data == key) {\n    *head = current->next;\n    free(current);\n    return;\n  }\n  \n  // Search for the node\n  while (current->next != NULL && current->next->data != key) {\n    current = current->next;\n  }\n  \n  // If found, delete it\n  if (current->next != NULL) {\n    struct Node* temp = current->next;\n    current->next = temp->next;\n    free(temp);\n  }\n}"
  },
  {
    "Task": "Recursive Function Completion (Python)",
    "Zero-Shot": "Complete the recursive function for Fibonacci:\ndef fibonacci(n):\n  # TODO: Base cases and recursive call\n  pass",
    "Few-Shot": "Complete the recursive function for Fibonacci:\ndef fibonacci(n):\n  # TODO: Base cases and recursive call\n  pass\n\nExample 1:\ndef fibonacci(n):\n  if n <= 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n\nExample 2:\ndef fibonacci(n):\n  # Base cases\n  if n == 0:\n    return 0\n  if n == 1 or n == 2:\n    return 1\n  # Recursive call\n  return fibonacci(n-1) + fibonacci(n-2)"
  },
  {
    "Task": "Constructor Completion (Python)",
    "Zero-Shot": "Complete the class constructor:\nclass Person:\n  def __init__(self):\n    # TODO: Add name, age, and optional email\n    pass",
    "Few-Shot": "Complete the class constructor:\nclass Person:\n  def __init__(self):\n    # TODO: Add name, age, and optional email\n    pass\n\nExample 1:\ndef __init__(self, name, age, email=None):\n  self.name = name\n  self.age = age\n  self.email = email\n\nExample 2:\ndef __init__(self, name, age, email=\"\"):\n  if not isinstance(name, str):\n    raise TypeError(\"Name must be a string\")\n  if not isinstance(age, int) or age < 0:\n    raise ValueError(\"Age must be a non-negative integer\")\n  self.name = name\n  self.age = age\n  self.email = email"
  },
  {
    "Task": "Binary Search Completion (Java)",
    "Zero-Shot": "Complete the binary search implementation:\npublic int binarySearch(int[] arr, int target) {\n  int left = 0, right = arr.length - 1;\n  while (left <= right) {\n    int mid = (left + right) / 2;\n    // TODO: Compare and adjust bounds\n  }\n  return -1;\n}",
    "Few-Shot": "Complete the binary search implementation:\npublic int binarySearch(int[] arr, int target) {\n  int left = 0, right = arr.length - 1;\n  while (left <= right) {\n    int mid = (left + right) / 2;\n    // TODO: Compare and adjust bounds\n  }\n  return -1;\n}\n\nExample 1:\npublic int binarySearch(int[] arr, int target) {\n  int left = 0, right = arr.length - 1;\n  while (left <= right) {\n    int mid = (left + right) / 2;\n    if (arr[mid] == target) {\n      return mid;\n    } else if (arr[mid] < target) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n  return -1;\n}\n\nExample 2:\npublic int binarySearch(int[] arr, int target) {\n  int left = 0, right = arr.length - 1;\n  while (left <= right) {\n    int mid = left + (right - left) / 2; // Avoids integer overflow\n    if (arr[mid] == target) {\n      return mid; // Found target, return index\n    }\n    if (arr[mid] < target) {\n      left = mid + 1; // Target is in right half\n    } else {\n      right = mid - 1; // Target is in left half\n    }\n  }\n  return -1; // Target not found"
  },
  {
    "Task": "Self-Consistency Bug Fixing (C++)",
    "Zero-Shot": "Resolve inconsistency between function name and logic:\n// Supposed to return true if x is even\nbool isOdd(int x) {\n  return x % 2 == 0; // Logic contradicts function name\n}",
    "Few-Shot": "Resolve inconsistency between function name and logic:\n// Supposed to return true if x is even\nbool isOdd(int x) {\n  return x % 2 == 0; // Logic contradicts function name\n}\n\nExample 1:\n// Supposed to return true if x is even\nbool isEven(int x) {\n  return x % 2 == 0;\n}\n\nExample 2:\n// Renamed function to match its behavior\nbool isEven(int x) {\n  return x % 2 == 0; // Returns true for even numbers\n}\n// Or alternatively, fix logic to match the name\nbool isOdd(int x) {\n  return x % 2 != 0; // Returns true for odd numbers\n}"
  },
  {
    "Task": "Prompt Chaining: Bug Identification ? Fix (JavaScript)",
    "Zero-Shot": "Identify and fix the bug:\nfunction isEven(n) {\n  return n % 2; // Returns 1 or 0, not true/false\n}",
    "Few-Shot": "Identify and fix the bug:\nfunction isEven(n) {\n  return n % 2; // Returns 1 or 0, not true/false\n}\n\nExample 1:\nThe bug is that the function returns n % 2 which gives 0 for even numbers and 1 for odd numbers, but JavaScript interprets 0 as false and 1 as true. This means isEven(4) returns 0 (falsy) when it should return true. The fix is to compare the result to 0:\n\nfunction isEven(n) {\n  return n % 2 === 0; // Correctly returns true for even numbers\n}\n\nExample 2:\nThe function currently returns the remainder after division by 2 (0 or 1), not a boolean. In JavaScript, 0 is falsy and 1 is truthy, so isEven(2) would return 0 which evaluates to false, contradicting the function name. Fix by explicitly checking if the remainder is 0:\n\nfunction isEven(n) {\n  return n % 2 === 0; // Now properly returns true for even numbers\n}"
  },
  {
    "Task": "Summary Decomposition (C++)",
    "Zero-Shot": "Decompose the high-level comment/summary into logical steps:\n// Function that validates an input, calculates square, and returns result\nint process(int x) {\n  if (x < 0) return -1;\n  return x * x;\n}",
    "Few-Shot": "Decompose the high-level comment/summary into logical steps:\n// Function that validates an input, calculates square, and returns result\nint process(int x) {\n  if (x < 0) return -1;\n  return x * x;\n}\n\nExample 1:\n// 1. Validate that input x is non-negative\n// 2. Calculate the square of input x\n// 3. Return the calculated result\nint process(int x) {\n  // 1. Validate that input x is non-negative\n  if (x < 0) return -1;\n  // 2. Calculate the square of input x\n  // 3. Return the calculated result\n  return x * x;\n}\n\nExample 2:\n/**\n * Process a number by:  \n * 1. Validating that the input is non-negative\n * 2. Computing the square of the input\n * 3. Returning the computed result or error code\n */\nint process(int x) {\n  // Validate input is non-negative\n  if (x < 0) return -1; // Return error code for invalid input\n  \n  // Calculate and return square\n  return x * x;\n}"
  },
  {
    "Task": "Purpose Inference ? Completion (Python)",
    "Zero-Shot": "Complete the function based on intent:\ndef calculate_average(scores):\n  total = 0\n  # TODO: Complete to return average\n  pass",
    "Few-Shot": "Complete the function based on intent:\ndef calculate_average(scores):\n  total = 0\n  # TODO: Complete to return average\n  pass\n\nExample 1:\ndef calculate_average(scores):\n  total = 0\n  for score in scores:\n    total += score\n  return total / len(scores) if scores else 0\n\nExample 2:\ndef calculate_average(scores):\n  total = 0\n  if not scores:\n    return 0  # Handle empty list case\n  \n  for score in scores:\n    total += score\n  \n  # Calculate and return the average\n  return total / len(scores)"
  }
] 